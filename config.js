const { schema, imports, dependencies, environment, expressions, endpoints } = program;

environment
  .add('API_TOKEN', 'The Api Token')

schema.type('Root')
  .field('sites', 'SiteCollection')

schema.type('SiteCollection')
  .computed('one', 'Site', 'A Webflow site')
    .param('id', 'String')
  .computed('items', '[Site]', 'List of all sites the provided access token is able to access.')

schema.type('Site')
  .computed('self', 'Site*')
  .computed('id', 'String', 'Unique identifier for site')
  .field('createdOn', 'String', 'Date the site was created')
  .field('name', 'String', 'Name given to site')
  .field('shortName', 'String', 'Slugified version of name')
  .field('lastPublished', 'String', 'Date site was last published')
  .field('previewUrl', 'String', 'URL of a generated image for the given site')
  .field('timezone', 'String', 'Site timezone set under Site Settings')
  .field('database', 'String')
  .computed('domains', 'DomainCollection', 'List of all custom domains added to the given site')
  .computed('collections', 'CollectionCollection','Groupings of Items and define the schema or structure of the custom data stored in those Items')

schema.type('DomainCollection')
  .computed('one', 'Domain', 'A custom domain')
    .param('id', 'String')
  .computed('items', '[Domain]', 'All custom domains')

schema.type('Domain')
  .computed('self', 'Domain*')
  .computed('id', 'String', 'Unique identifier for site')
  .field('name', 'String', 'The domain name')

schema.type('CollectionCollection')
  .computed('one', 'Collection')
    .param('id', 'String')
  .computed('items', '[Collection]')

schema.type('Collection')
  .computed('self', 'Collection*')
  .computed('id', 'String', 'The unique identifier for the Collection')
  .field('lastUpdated', 'String', 'Collection was last updated')
  .field('createdOn', 'String', 'Collection was created')
  .field('name', 'String', 'Name given to Collection')
  .field('slug', 'String', 'Slug of Collection in Site URL structure')
  .field('singularName', 'String', 'The name of one Item in Collection')
  .computed('fields', 'String', 'See full Fields section')
  .computed('items', 'ItemCollection')

schema.type('ItemCollection')
  .computed('one', 'Item')
    .param('id', 'String')
  .computed('page', 'ItemPage')
      .param('offset','Int')
      .param('limit','Int')

schema.type('ItemPage')
  .computed('items', '[Item]')
  .computed('next', 'ItemPage*')

schema.type('Item')
  .computed('self', 'Item*')
  .computed('id', 'String', 'Unique identifier for the Item')
  .computed('archived','Boolean', 'Boolean determining if the Item is set to archived')
  .computed('draft','Boolean', 'Boolean determining if the Item is set to draft')
  .field('color','String')
  .field('featured','String')
  .field('name','String', 'Name given to the Item')
  .computed('postBody','String')
  .computed('postSummary','String')
  .field('slug','String', 'URL structure of the Item in your site')
  .computed('updatedOn','String', 'Date Item was last updated')
  .computed('updatedBy','String', 'User who made last change to Item')
  .computed('createdOn','String', 'Date Item was created')
  .computed('createdBy','String', 'User who created Item')
  .computed('publishedOn','String', 'Date Item was last published')
  .computed('publishedBy','String', 'User who last published Item')
  .field('author','String')
  .computed('cid','String', 'Unique identifier for the Collection the Item belongs within')
  .computed('thumbnailImage','ImageSource')
  .computed('mainImage','ImageSource')

schema.type('ImageSource')
  .field('fileId', 'String')
  .field('url', 'String')

